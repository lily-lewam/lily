{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red46\green174\blue187;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c20196\c73240\c78250;\csgray\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 # config file for ansible -- https://ansible.com/\cf3 \
\cf2 # ===============================================\cf3 \
\
\cf2 # nearly all parameters can be overridden in ansible-playbook\cf3 \
\cf2 # or with command line flags. ansible will read ANSIBLE_CONFIG,\cf3 \
\cf2 # ansible.cfg in the current working directory, .ansible.cfg in\cf3 \
\cf2 # the home directory or /etc/ansible/ansible.cfg, whichever it\cf3 \
\cf2 # finds first\cf3 \
\
[defaults]\
\
\cf2 # some basic default values...\cf3 \
\
\cf2 #inventory      = /etc/ansible/hosts\cf3 \
\cf2 #library        = /usr/share/my_modules/\cf3 \
\cf2 #module_utils   = /usr/share/my_module_utils/\cf3 \
\cf2 #remote_tmp     = ~/.ansible/tmp\cf3 \
\cf2 #local_tmp      = ~/.ansible/tmp\cf3 \
\cf2 #plugin_filters_cfg = /etc/ansible/plugin_filters.yml\cf3 \
\cf2 #forks          = 5\cf3 \
\cf2 #poll_interval  = 15\cf3 \
\cf2 #sudo_user      = root\cf3 \
\cf2 #ask_sudo_pass = True\cf3 \
\cf2 #ask_pass      = True\cf3 \
\cf2 #transport      = smart\cf3 \
\cf2 #remote_port    = 22\cf3 \
\cf2 #module_lang    = C\cf3 \
\cf2 #module_set_locale = False\cf3 \
\
\cf2 # plays will gather facts by default, which contain information about\cf3 \
\cf2 # the remote system.\cf3 \
\cf2 #\cf3 \
\cf2 # smart - gather by default, but don't regather if already gathered\cf3 \
\cf2 # implicit - gather by default, turn off with gather_facts: False\cf3 \
\cf2 # explicit - do not gather by default, must say gather_facts: True\cf3 \
\cf2 #gathering = implicit\cf3 \
\
\cf2 # This only affects the gathering done by a play's gather_facts directive,\cf3 \
\cf2 # by default gathering retrieves all facts subsets\cf3 \
\cf2 # all - gather all subsets\cf3 \
\cf2 # network - gather min and network facts\cf3 \
\cf2 # hardware - gather hardware facts (longest facts to retrieve)\cf3 \
\cf2 # virtual - gather min and virtual facts\cf3 \
\cf2 # facter - import facts from facter\cf3 \
\cf2 # ohai - import facts from ohai\cf3 \
\cf2 # You can combine them using comma (ex: network,virtual)\cf3 \
\cf2 # You can negate them using ! (ex: !hardware,!facter,!ohai)\cf3 \
\cf2 # A minimal set of facts is always gathered.\cf3 \
\cf2 #gather_subset = all\cf3 \
\
\cf2 # some hardware related facts are collected\cf3 \
\cf2 # with a maximum timeout of 10 seconds. This\cf3 \
\cf2 # option lets you increase or decrease that\cf3 \
\cf2 # timeout to something more suitable for the\cf3 \
\cf2 # environment.\cf3 \
\cf2 # gather_timeout = 10\cf3 \
\
\cf2 # Ansible facts are available inside the ansible_facts.* dictionary\
# namespace. This setting maintains the behaviour which was the default prior\cf3 \
\cf2 # to 2.5, duplicating these variables into the main namespace, each with a\cf3 \
\cf2 # prefix of 'ansible_'.\cf3 \
\cf2 # This variable is set to True by default for backwards compatibility. It\cf3 \
\cf2 # will be changed to a default of 'False' in a future release.\cf3 \
\cf2 # ansible_facts.\cf3 \
\cf2 # inject_facts_as_vars = True\cf3 \
\
\cf2 # additional paths to search for roles in, colon separated\cf3 \
\cf2 #roles_path    = /etc/ansible/roles\cf3 \
\
\cf2 # uncomment this to disable SSH key host checking\cf3 \
\cf2 #host_key_checking = False\cf3 \
\
\cf2 # change the default callback, you can only have one 'stdout' type  enabled at a time.\cf3 \
\cf2 #stdout_callback = skippy\cf3 \
\
\
\cf2 ## Ansible ships with some plugins that require whitelisting,\cf3 \
\cf2 ## this is done to avoid running all of a type by default.\cf3 \
\cf2 ## These setting lists those that you want enabled for your system.\cf3 \
\cf2 ## Custom plugins should not need this unless plugin author specifies it.\cf3 \
\
\cf2 # enable callback plugins, they can output to stdout but cannot be 'stdout' type.\cf3 \
\cf2 #callback_whitelist = timer, mail\cf3 \
\
\cf2 # Determine whether includes in tasks and handlers are "static" by\cf3 \
\cf2 # default. As of 2.0, includes are dynamic by default. Setting these\cf3 \
\cf2 # values to True will make includes behave more like they did in the\cf3 \
\cf2 # 1.x versions.\cf3 \
\cf2 #task_includes_static = False\cf3 \
\cf2 #handler_includes_static = False\cf3 \
\
\cf2 # Controls if a missing handler for a notification event is an error or a warning\cf3 \
\cf2 #error_on_missing_handler = True\cf3 \
\
\cf2 # change this for alternative sudo implementations\cf3 \
\cf2 #sudo_exe = sudo\cf3 \
\
\cf2 # What flags to pass to sudo\cf3 \
\cf2 # WARNING: leaving out the defaults might create unexpected behaviours\cf3 \
\cf2 #sudo_flags = -H -S -n\cf3 \
\
\cf2 # SSH timeout\cf3 \
\cf2 #timeout = 10\cf3 \
\
\cf2 # default user to use for playbooks if user is not specified\cf3 \
\cf2 # (/usr/bin/ansible will use current user as default)\cf3 \
remote_user = azadmin\
\
\cf2 # logging is off by default unless this path is defined\cf3 \
\cf2 # if so defined, consider logrotate\cf3 \
\cf2 #log_path = /var/log/ansible.log\cf3 \
\
\cf2 # default module name for /usr/bin/ansible\cf3 \
\cf2 #module_name = command\cf3 \
\
[inventory]\
\cf2 # enable inventory plugins, default: 'host_list', 'script', 'auto', 'yaml', 'ini', 'toml'\cf3 \
\cf2 #enable_plugins = host_list, virtualbox, yaml, constructed\cf3 \
\
\cf2 # ignore these extensions when parsing a directory as inventory source\cf3 \
\cf2 #ignore_extensions = .pyc, .pyo, .swp, .bak, ~, .rpm, .md, .txt, ~, .orig, .ini, .cfg, .retry\cf3 \
\
\cf2 # ignore files matching these patterns when parsing a directory as inventory source\cf3 \
\cf2 #ignore_patterns=\cf3 \
\
\cf2 # If 'true' unparsed inventory sources become fatal errors, they are warnings otherwise.\cf3 \
\cf2 #unparsed_is_failed=False\cf3 \
\
[privilege_escalation]\
\cf2 #become=True\cf3 \
\cf2 #become_method=sudo\cf3 \
\cf2 #become_user=root\cf3 \
\cf2 #become_ask_pass=False\cf3 \
\
[paramiko_connection]\
\
\cf2 # uncomment this line to cause the paramiko connection plugin to not record new host\cf3 \
\cf2 # keys encountered.  Increases performance on new host additions.  Setting works independently of the\cf3 \
\cf2 # host key checking setting above.\cf3 \
\cf2 #record_host_keys=False\cf3 \
\
\cf2 # by default, Ansible requests a pseudo-terminal for commands executed under sudo. Uncomment this\cf3 \
\cf2 # line to disable this behaviour.\cf3 \
\cf2 #pty=False\cf3 \
\
\cf2 # paramiko will default to looking for SSH keys initially when trying to\cf3 \
\cf2 # authenticate to remote devices.  This is a problem for some network devices\cf3 \
\cf2 # that close the connection after a key failure.  Uncomment this line to\cf3 \
\cf2 # disable the Paramiko look for keys function\cf3 \
\cf2 #look_for_keys = False\cf3 \
\
\cf2 # When using persistent connections with Paramiko, the connection runs in a\cf3 \
\cf2 # background process.  If the host doesn't already have a valid SSH key, by\cf3 \
\cf2 # default Ansible will prompt to add the host key.  This will cause connections\cf3 \
\cf2 # running in background processes to fail.  Uncomment this line to have\cf3 \
\cf2 # Paramiko automatically add host keys.\cf3 \
\cf2 #host_key_auto_add = True\cf3 \
\
[ssh_connection]\
[persistent_connection]\
\
\cf2 # Configures the persistent connection timeout value in seconds.  This value is\cf3 \
\cf2 # how long the persistent connection will remain idle before it is destroyed.\cf3 \
\cf2 # If the connection doesn't receive a request before the timeout value\cf3 \
\cf2 # expires, the connection is shutdown. The default value is 30 seconds.\cf3 \
\cf2 #connect_timeout = 30\cf3 \
\
\cf2 # The command timeout value defines the amount of time to wait for a command\cf3 \
\cf2 # or RPC call before timing out. The value for the command timeout must\cf3 \
\cf2 # be less than the value of the persistent connection idle timeout (connect_timeout)\cf3 \
\cf2 # The default value is 30 second.\cf3 \
\cf2 #command_timeout = 30\cf3 \
\
[accelerate]\
\cf2 #accelerate_port = 5099\cf3 \
\cf2 #accelerate_timeout = 30\cf3 \
\cf2 #accelerate_connect_timeout = 5.0\cf3 \
\
\cf2 # The daemon timeout is measured in minutes. This time is measured\cf3 \
\cf2 # from the last activity to the accelerate daemon.\cf3 \
\cf2 #accelerate_daemon_timeout = 30\cf3 \
\
\cf2 # If set to yes, accelerate_multi_key will allow multiple\cf3 \
\cf2 # private keys to be uploaded to it, though each user must\cf3 \
\cf2 # have access to the system via SSH to add a new key. The default\cf3 \
\cf2 # is "no".\cf3 \
\cf2 #accelerate_multi_key = yes\cf3 \
\
[selinux]\
\cf2 # file systems that require special treatment when dealing with security context\cf3 \
\cf2 # the default behaviour that copies the existing context or uses the user default\cf3 \
\cf2 # needs to be changed to use the file system dependent context.\cf3 \
\cf2 #special_context_filesystems=nfs,vboxsf,fuse,ramfs,9p,vfat\cf3 \
\
\cf2 # Set this to yes to allow libvirt_lxc connections to work without SELinux.\cf3 \
\cf2 #libvirt_lxc_noseclabel = yes\cf3 \
\
[colors]\
\cf2 #highlight = white\cf3 \
\cf2 #verbose = blue\cf3 \
\cf2 #warn = bright purple\cf3 \
\cf2 #error = red\cf3 \
\cf2 #debug = dark gray\cf3 \
\cf2 #deprecate = purple\cf3 \
\cf2 #skip = cyan\cf3 \
\cf2 #unreachable = red\cf3 \
\cf2 #ok = green\
\cf3 [diff]\
\cf2 # Always print diff when running ( same as always running with -D/--diff )\cf3 \
\cf2 # always = no\cf3 \
\
\cf2 # Set how many context lines to show in diff\cf3 \
\cf2 # context = 3}